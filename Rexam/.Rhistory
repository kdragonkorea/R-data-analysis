sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 3)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d)) # NULL은 데이터셋이고 리스트로 리턴
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), n=4)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d)) # NULL은 데이터셋이고 리스트로 리턴
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 3) #
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
v = sample(1:26, 10)
v
v
v
v
v
v = sample(1:26, 10)
v
sapply(df, sum, na.rm=TRUE) # sapply: named vector 리턴
tapply(1:6, gender, sum) # F: 2+5+6, M: 1+3+4
sapply(v, LETTERS)
littleprince <- c(p1, p2, p3)
strsplit(littleprince, " ")
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
v = sample(1:26, 10)
sapply(v, LETTERS(nums))
v = sample(1:26, 10)
sapply(v, LETTERS(nums) paste(d))
sapply(v, function(d))
sapply(v, function(d) paste(d))
v
LETTERS
LETTERS[index]
index[LETTERS]
names(islands)
landmesses
index
landmesses[index]
landmesses
grep(pattern="New", x=landmesses)
LETTERS
testParamType2(LETTERS)
f.case3(LETTERS)
names(lds) <- LETTERS[1:3]
names(lds)
nchar(x)
length(x)
letters
sort(letters, decreasing=TRUE)
tolower(fox.says)
toupper(fox.says)
substr("Data Analytics", start=1, stop=4) # 문자를 부분적으로 추출
classname <- c("Data Analytics", "Data Mining",
classname
classname <- c("Data Analytics", "Data Mining",
"Data Visualization")
substr(classname, 1, 4)
head(islands)
sapply(v, evenodd1)
sapply(v, evenodd2)
sapply(v, sum)
v = sample(1:26, 10)
sapply(v, sum)
sapply(v, mean)
v = sample(1:26, 10)
sapply(v, mean)
v = sample(1:26, 10)
sapply(v, sum)
v
sapply(v, sum)
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
sapply(v, paste, LETTERS[1:10])
v = sample(1:26, 10)
sapply(v, paste, LETTERS[1:10])
v
sapply(v, paste, LETTERS)
sapply(v, paste, LETTERS[1])
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
sapply(df, sum, na.rm=TRUE) # sapply: named vector 리턴
vmSum(LETTERS)
vmSum <- function(vt){
if (!is.vector(vt) || is.list(vt)){
return("벡터만 전달하숑!")
} else if(!is.numeric(vt)){
print("숫자 벡터를 전달하숑!");
return(0)
} else
return(sum(vt))
}
vmSum(c(1,4,3))
vmSum(c(1,2,3,4,5))
vmSum(c(1,"가"))
vmSum(c("가","1"))
vmSum(data.frame(1,2,3))
vmSum(list(1,2,3))
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
length(flower)
nchar(flower)
LETTER[1]
LETTERS[1]
LETTERS[v]
v = sample(1:26, 10)
v
LETTERS[v]
v = sample(1:26, 10)
v
LETTERS[v]
sapply(v, paste, LETTERS[v])
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
LETTERS[v]
v = sample(1:26, 10)
LETTERS[v]
v = sample(1:26, 10)
LETTERS[v]
v = sample(1:26, 10)
LETTERS[v]
v = sample(1:26, 10)
LETTERS[v]
v = sample(1:26, 10)
LETTERS[v]
sapply(v,LETTERS[v])
LETTERS[v]
sapply(v,LETTERS)
str(LETTERS)
sapply(v,function(d, n=26) if(LETTERS[d] == v) return(d))
sapply(v,function(d, n=26) if(LETTERS[d] == n) return(d))
sapply(v,function(d) if(LETTERS[d] == n) return(d))
sapply(v,function(d) if(LETTERS[d] == v) return(d))
sapply(v,function(d) if(LETTERS[v] == d) return(d))
memo_new <- scan("data/memo.txt",what="") # what을 넣으면 숫자가 아닌 문자로
memo_new
memo_new <- scan("data/memo.txt",what="",encoding="UTF-8")
memo_new
word <- "JAVA javascript 가나다 123 %^&*"
gsub("A", "", word)
gsub("[[:punct:]]", "", memo_new)
gsub("[[:digit:]]", "", memo_new)
gsub("\\d", "", word); gsub("\\D", "", word)
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
words_utf8 <- scan("data/sample_utf8.txt", what="",encoding="UTF-8")
words_utf8
df2 <- read.table("data/product_click.log", stringsAsFactors = T) # read.csv() 유사함
df2
lines_ansi <- readLines("data/sample_ansi.txt")
lines_ansi
lines_ansi <- readLines("data/sample_ansi.txt")
lines_ansi
word <- "JAVA javascript 가나다 123 %^&*"
gsub("[Aa]", "", word)
gsub("[가-힣]", "", word)
gsub("[^가-힣]", "", word)
gsub("[[:space:]]", "", word)
gsub("[[:space:][:punct:]]", "", word)
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub("\\d", "", word)
gsub("\\D", "", word)
gsub("\\d", "", word)
y <- c("We", "have", "a", "dream", "ㅋㅋㅋ")
length(y)
nchar(y)
fox.says <- "It is only with the HEART that one can See Rightly"
x <- "We have a dream"
x
nchar(x)
length(x)
classname <- c("Data Analytics", "Data Mining",
"Data Visualization")
classname
substr(classname, 1, 4)
countries <- c("Korea, KR", "United States, US",
"China, CN")
substr(countries, nchar(countries)-1, nchar(countries))
txt <- "Data Analytics is useful. Data Analytics is also interesting."
sub(pattern="Data", replacement="Business", x=txt)
x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
gsub(".csv", "", x)
words2 <- c("12 Dec", "OK", "http//",
"<TITLE>Time?</TITLE>",
"12345", "Hi there")
words2
fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split= " ") # strsplit: 문자 split 하여 vector로 출력
strsplit(x= fox.said, split="") # 각 문자별로 split하여 list로 출력
fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words # vector
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
littleprince <- c(p1, p2, p3)
strsplit(littleprince, " ")
memo_new <- scan("data/memo.txt",what="",encoding="UTF-8")
memo_new
fox.said.words
strsplit(fox.said, " ")
fox.said <- "What is essential is invisible to the eye"
fox.said
memo_new <- readLines("data/memo.txt",encoding="UTF-8")
memo_new
str(memo_new)
summary(memo_new)
memo_new <- readLines("data/memo.txt",encoding="UTF-8")
memo_new
memo_new[1]
memo_new[2]
memo_new[1]
gsub("[[:punct:]][[:digit:]][Aa]", "", memo_new[1])
gsub("[[:punct:][:digit:][Aa]]", "", memo_new[1])
gsub("[[:punct:]]", "", memo_new[1])
gsub(pattern="되고", replacement="되고,", memo_new[1])
memo_new[1]
gsub("[[:punct:]]", "", memo_new[1])
memo_new[1]_1 <- gsub("[[:punct:]]", "", memo_new[1])
gsub(pattern="되고", replacement="되고,", memo_new[1]_1)
gsub("[&$!#@%]", "", memo_new[1])
memo_new[2]
gsub("e", "E", memo_new[2])
memo_new[3]
gsub("[:digit:]", "", memo_new[3])
gsub("[[:digit:]]", "", memo_new[3])
memo_new[4]
gsub("[^[:alnum:]]", "", word)
gsub("[a-z]", "", memo_new[4])
gsub("[A-Z]", "", memo_new[4])
gsub("[^A-Z]", "", memo_new[4])
gsub("[A-z]", "", memo_new[4])
memo_new[4]
gsub("[A-z]", "", memo_new[4])
memo_new[5]
gsub("[[:punct:][:digit:]]", "", memo_new[5])
gsub("[!<>][:digit:]]", "", memo_new[5])
gsub("[!<>]", "", memo_new[5])
gsub("[[!<>][:digit:]]", "", memo_new[5])
gsub("[[:!<>:][:digit:]]", "", memo_new[5])
memo_new[5]
gsub("[0-9]", "", memo_new[5])
gsub("[0-9!]", "", memo_new[5])
gsub("[0-9!<>]", "", memo_new[5])
gsub("[[:space:]]", "", memo_new[9])
memo_new[6]
gsub("[[:space:]]", "", memo_new[6])
memo_new[7]
gsub(".  ", ". ", memo_new[7])
gsub("[&$!#@%]", "", memo_new[1]) -> L1
gsub("e", "E", memo_new[2]) -> L2
gsub("[&$!#@%]", "", memo_new[1]) -> L1
memo_new[2]
gsub("e", "E", memo_new[2]) -> L2
memo_new[3]
gsub("[[:digit:]]", "", memo_new[3]) -> L3
memo_new[4]
gsub("[A-z]", "", memo_new[4]) -> L4
memo_new[5]
gsub("[0-9!<>]", "", memo_new[5]) -> L5
memo_new[6]
gsub("[[:space:]]", "", memo_new[6]) -> L6
memo_new[7]
gsub(".  ", ". ", memo_new[7]) -> L7
memo <- readLines("data/memo.txt",encoding="UTF-8")
memo[1]
gsub("[&$!#@%]", "", memo[1]) -> L1
memo[2]
gsub("e", "E", memo[2]) -> L2
memo[3]
gsub("[[:digit:]]", "", memo[3]) -> L3
memo[4]
gsub("[A-z]", "", memo[4]) -> L4
memo[5]
gsub("[0-9!<>]", "", memo[5]) -> L5
memo[6]
gsub("[[:space:]]", "", memo[6]) -> L6
memo[7]
gsub(".  ", ". ", memo[7]) -> L7
memo_new = c(L1:L7)
L7
L1
memo <- readLines("data/memo.txt",encoding="UTF-8")
memo
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p1
littleprince <- c(p1, p2, p3)
littleprince
memo_new = c(L1, L2)
memo_new
memo_new = c(L1:L2)
memo_new = c(L1, L2, L3, L4, L5, L6, L7)
memo_new
littleprince <- c(p1:p3)
littleprince <- c(p1, p2, p3)
littleprince <- c(p1:p3)
strsplit(littleprince, " ")[[3]]
save(memo_new, memo_new.txt)
save(memo_new,  file="memo_new.rda")
write.txt(memo_new)
write.txt(data_processing2)
write.csv(memo_new)
save(memo_new, file="memo_new.txt")
save(memo_new, file="memo_new.rda")
sdf
write.txt
write.txt(memo_new)
write.table(memo_new.txt)
write.table(memo_new,memo_new.txt)
write.table(memo_new, data_processing2.txt)
write.table(memo_new, data_processing2.R)
write.table(memo_new,file="memo_new.txt")
memo_new
memo
fox.said
fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words # vector
write.table(memo_new,file="memo_new.txt", row.names = FALSE)
write.table(memo_new,file="memo_new.txt",sep = "",row.names = FALSE)
write.table(memo_new,file="memo_new.txt", col.names = NA, row.names = FALSE)
write.table(memo_new,file="memo_new.txt", row.names = FALSE)
memo_new
memo
fox.said <- "What is essential is invisible to the eye"
fox.said
txt <- "Data Analytics is useful. Data Analytics is also interesting."
txt
x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
gsub(".csv", "", x)
write.table(memo_new,file="memo_new.txt", quote = TRUE, row.names = FALSE)
write.table(memo_new,file="memo_new.txt", quote = F, row.names = FALSE)
write.table(memo_new,file="memo_new.txt", quote = FALSE, row.names = FALSE)
L1
memo_new = c(L1, L2, L3, L4, L5, L6, L7)
memo_new
write.table(memo_new,file="memo_new.txt", quote = FALSE, row.names = FALSE)
sapply(v, function(d) if(LETTERS[v] == d) return(d))
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
v = sample(1:26, 10)
LETTERS[v]
LETTERS[1]
LETTERS[2]
LETTERS[v]
sapply(v, function(d))
v <- c(10,11,20,22,30,33)
evenodd1 <- function(p) if(p %% 2 == 0) return("even") else return("odd")
sapply(v, evenodd1)
sapply(v, function(x) return(v))
v <- c(10,11,20,22,30,33)
evenodd1 <- function(p) if(p %% 2 == 0) return("even") else return("odd")
sapply(v, evenodd1)
v = sample(1:26, 10)
sapply(v, function(x) for (i in LETTERS[v]) return(i))
v = sample(1:26, 10)
v
sapply(v, function(x) for (i in LETTERS[v]) return(i))
LETTERS[v]
ABC <- function(x)
for (i in v) return(i)
ABC
sapply(v, ABC)
v
v[1]
v[2]
function(x)
for (i in v)
i = i +1
return(i)
ABC = function(x) {
for (i in v)
i = i +1
return(i)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
ABC = function(x) {
for (i in v)
i = i +1
return(i)
}
sapply(v, ABC)
ABC = function(x) {
for (i in v)
i = v[i+1]
return(i)
}
sapply(v, ABC)
i = 0
ABC = function(x) {
for (i in v)
i = v[i+1]
return(i)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
LETTERS[v]
v = sample(1:26, 10)
v
v = sample(1:26, 10)
v[1]
i = 0
ABC = function(x) {
for (i in 1:x)
i = v[i+1]
return(x)
}
sapply(v, ABC)
LETTERS[1]
ABC = function(x) {
for (i in v[x])
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
ABC = function(x) {
for (i in 1:x)
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
ABC = function(x) {
for (i in 1:x)
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
ABC = function(x) {
for (i in 1:x)
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
LETTERS[v]
ABC = function(x) {
for (i in 1:x)
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
LETTERS[v]
ABC = function(x) {
for (i in 1:x)
i = LETTERS[i]
return(i)
}
sapply(v, ABC)
LETTERS[v]
