}
sapply(v, evenodd2)
lapply(v, evenodd2)
a<-3;b<-7;c<-11
ft<-function(a){
b<-a+10
c<<-a+10   # 전역대입연산
d<-a
print(a);print(b);print(c);print(d)
return()  # NULL
}
a<-3;b<-7;c<-11
ft<-function(a){
b<-a+10
c<<-a+10   # 전역대입연산
d<-a
print(a);print(b);print(c);print(d)
return()  # NULL
}
print(a);print(b);print(c);print(d)
print(ft(100))
print(a);print(b);print(c);print(d)
print(ft(200))
print(a);print(b);print(c);print(d)
ft.1 <- function(x) return()
ft.2 <- function(x) return(x+10)
ft.3 <- function(x) invisible(x+10)
ft.1(100)
ft.2(100)
ft.3(100)
r1 <- ft.1(1000);r1
r2 <- ft.2(1000);r2
r3 <- ft.3(1000);r3
Sys.sleep(second)
testSleep <- function(second) {
for(data in LETTERS[1:5]) {
cat(data)
Sys.sleep(second)
}
}
Sys.sleep(second)
cat(data)
cat(data)
cat(data)
cat(data)
testSleep(1)
testSleep(0)
testSleep(3)
testParamType <- function(x){
if(is.vector(x)) print("벡터를 전달했군요!")
if(is.data.frame(x)) print("데이터프레임을 전달했군요!")
if(is.list(x)) print("리스트를 전달했군요!")
if(is.matrix(x)) print("매트릭스를 전달했군요!")
if(is.array(x)) print("배열을 전달했군요!")
if(is.function(x)) print("함수를 전달했군요!")
}
testParamType2 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("숫자 백터만을 원하오!!")
}
return(result)
}
testParamType2(1:3)
testParamType2(list(1,2,3))
testParamType2(LETTERS)
testError1 <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
return(rep("테스트",x))
}
testError1(5)
#warning() 함수
testWarn <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
if(x>5){
x<-5
warning("5보다 크면 안됨!! 하여 5로 처리했삼...!!")
}
return(rep("테스트",x))
}
testWarn(3)
testWarn(10)
test2 <- function(p){
cat("난 수행함\n")
try(testError1(-1))
cat("나 수행할 까요? \n")
}
test2()
testAll <-function(p){
tryCatch({
if(p=="오류테스트"){
testError1(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError1(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
},error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부에 관계없이 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
f.case1 <- function(x) {
if(is.na(x))
return("NA가 있슈")
else
return("NA가 없슈")
}
f.case1(100)
f.case1(NA)
f.case1(1:6)
f.case1(c(10,20,30))
f.case1(c(NA, 20))
f.case1(c(10, NA, 20))
f.case2 <- function(x) {
if(any(is.na(x)))
return("NA가 있슈")
else
return("NA가 없슈")
}
f.case2(100)
f.case2(NA)
f.case2(1:6)
f.case2(c(NA, 20))
f.case3 <- function(x) {
if(all(is.na(x)))
return("모두 NA임")
else
return("모두 NA인 것은 아님")
}
f.case3(100)
f.case3(LETTERS)
f.case3(NA)
f.case3(c(NA, NA, NA))
f.case3(c(NA, NA, 10))
testSleep1 <- function(x) {
for(data in 6:10) {
cat(data,"\n")
if(x)
Sys.sleep(1)
}
return()
}
testSleep1(FALSE)
testSleep1(TRUE)
funcArgs1 <- function(...) {
p <- c(...)
data <- c(10,15,3,5,17,25)
for(opt in p) {
switch(EXPR=opt,
SUM=, Sum=, sum= print(sum(data)),
MEAN=, Mean=, mean= print(mean(data)),
DIFF=, Diff=, diff= print(max(data) - min(data)),
MAX=, Max=, max= print(max(data)),
MIN=, Min=, min= print(min(data)),
SORT=, Sort=, sort= print(sort(data))
)
}
}
evenodd2 <- function(p) {
if(p %% 2 == 0)
r <- "even"
else
r <- "odd"
return(r)
}
sapply(v, evenodd2)
lapply(v, evenodd2)
lapply(v, evenodd2)
countEvenOdd = function(x) {
if(x %% 2 == 0)
result = "even"
else
result = "odd"
return(result)
}
countEvenOdd(3)
evenodd2(3)
length(countEvenOdd(3))
length(countEvenOdd(2))
countEvenOdd(5)
lapply(v, evenodd2)
v = (1:p)
evenodd2 <- function(p) {
if(p %% 2 == 0)
r <- "even"
else
r <- "odd"
return(r)
}
lapply(v, evenodd2)
countEvenOdd = function(x) {
if(is.numeric(x)) {
data = c(1:X)
odd = length(data %% 2 == 0)
even = length(data %% 2 != 0)
} else {
return()
}
}
countEvenOdd(5)
testParamType2 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("숫자 백터만을 원하오!!")
}
return(result)
}
testParamType2(1:3)
testParamType2(list(1,2,3))
testParamType2 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("숫자 백터만을 원하오!!")
}
return(result)
}
testParamType2(1:3)
testParamType2(list(1,2,3))
testParamType2 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("숫자 백터만을 원하오!!")
}
return(result)
}
testParamType2(1:3)
vmSum <- function(x){
result <- NULL
if(is.vector(x) && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("벡터만 전달하숑!")
}
return(result)
}
vmSum(1:3)
vmSum(1:5)
vmSum(LETTERS)
testWarn <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
if(x>5){
x<-5
warning("5보다 크면 안됨!! 하여 5로 처리했삼...!!")
}
return(rep("테스트",x))
}
testWarn(3)
testWarn(10)
vmSum <- function(x){
result <- NULL
if(is.vector(x) && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
if(is.vector(x) && !is.numeric(x)){
stop("숫자 벡터를 전달하숑!")
} else
stop("벡터만 전달하숑!")
}
return(result)
}
vmSum(1:5)
vmSum <- function(x){
result <- NULL
if(is.vector(x) && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
if(is.vector(x) && !is.numeric(x)){
stop("숫자 벡터를 전달하숑!")
} else
stop("벡터만 전달하숑!")
}
return(result)
}
vmSum(1:5)
vmSum(LETTERS)
vmSum(list(1,2,3))
vmSum(1:5)
vmSum(LETTERS)
vmSum(list(1,2,3))
vmSum <- function(x){
result <- NULL
if(is.vector(x)) {
result <- sum(x)
} else {
if(is.vector(x) && !is.numeric(x)){
stop("숫자 벡터를 전달하숑!")
} else
stop("벡터만 전달하숑!")
}
return(result)
}
vmSum(1:5)
vmSum(LETTERS)
vmSum(list(1,2,3))
data = scan("data/iotest1.txt",what="",encoding="UTF-8")
data
data()
sum(data)
data = scan("data/iotest1.txt",what="",encoding="UTF-8")
sum(data)
head(data)
summary(data)
data = scan("data/iotest1.txt",encoding="UTF-8")
summary(data)
sum(data)
sort(data)
sort(data, decreasing = T)
data = scan("data/iotest1.txt",encoding="UTF-8")
summary(data)
sort(data)
sort(data, decreasing = T)
sum(data)
mean(data)
data = scan("data/iotest2.txt",encoding="UTF-8")
summary(data)
data = scan("data/iotest2.txt",encoding="UTF-8")
data = scan("data/iotest2.txt",encoding="UTF-8")
data2 = scan("data/iotest2.txt",encoding="UTF-8")
data2 = scan("data/iotest2.txt",what="",encoding="UTF-8")
data2 = scan("data/iotest2.txt",what="",encoding="UTF-8")
summary(data2)
data = scan("data/iotest2.txt",encoding="UTF-8")
summary(data)
data = scan("data/iotest2.txt",encoding="UTF-8")
summary(data)
data2 = scan("data/iotest2.txt",encoding="UTF-8")
summary(data2)
data = scan("data/iotest1.txt",encoding="UTF-8")
summary(data)
summary(data2)
head(data2)
str(data2)
str(data)
apply(data2, 1, max)
head(data2)
str(data2)
data2 = as.factor(data2)
data2
data3 = as.factor(data2)
summary(data3)
max(summary(data3))
maxword = max(summary(data3))
maxword
paste("가장 많이 등장한 단어는",maxword,"입니다.")
class(data3)
summary(data3)
summary(data3)
data3
data3 = as.factor(data2)
data3
summary(data3)
max(summary(data3))
data3$max(summary(data3))
data3[max(summary(data3))]
maxword = data3[max(summary(data3))]
maxword = data3[max(summary(data3))]
paste("가장 많이 등장한 단어는",maxword,"입니다.")
data = scan("data/iotest1.txt",encoding="UTF-8")
summary(data)
str(data)
sort(data)
sort(data, decreasing = T)
sum(data)
mean(data)
cat("오름차순:",a,"내림차순:",b,"합:",c,"평균:",d)
a = sort(data)
b = sort(data, decreasing = T)
c = sum(data)
d = mean(data)
cat("오름차순:",a,"내림차순:",b,"합:",c,"평균:",d)
cat("오름차순:",a,"\n","내림차순:",b,"\n","합:",c,"\n","평균:",d)
funcArgs2 <- function(...) {
p <- c(...)
data <- c(10,15,3,5,17,25)
if(is.null(p))
print(data)
else
for(opt in p) {
switch(EXPR=opt,
SUM=, Sum=, sum= print(sum(data)),
MEAN=, Mean=, mean= print(mean(data)),
DIFF=, Diff=, diff= print(max(data) - min(data)),
MAX=, Max=, max= print(max(data)),
MIN=, Min=, min= print(min(data)),
SORT=, Sort=, sort= print(sort(data))
)
}
}
funcArgs2()
funcArgs2("SUM", "mean", "Min")
funcArgs2("SORT", "Sort", "sort")
funcArgs1 <- function(...) {
p <- c(...)
data <- c(10,15,3,5,17,25)
for(opt in p) {
switch(EXPR=opt,
SUM=, Sum=, sum= print(sum(data)),
MEAN=, Mean=, mean= print(mean(data)),
DIFF=, Diff=, diff= print(max(data) - min(data)),
MAX=, Max=, max= print(max(data)),
MIN=, Min=, min= print(min(data)),
SORT=, Sort=, sort= print(sort(data))
)
}
}
funcArgs1()
funcArgs1("SUM", "mean", "Min")
funcArgs1("SORT", "Sort", "sort")
funcArgs1()
()
funcArgs1()
funcArgs1("SUM", "mean", "Min")
funcArgs1("SUM", "mean", "Min")
funcArgs1("SORT", "Sort", "sort")
funcArgs1("SUM")
a = LETTERS
a
f.case2(100)
f.case2(NA)
f.case1(c(10, NA, 20))
f.case1(c(NA, 20))
f.case1(c(10,20,30))
f.case1(100)
f.case1(NA)
f.case1(1:6)
f.case1(c(10,20,30))
f.case1(c(NA, 20))
f.case1(c(10, NA, 20))
f.case2(100)
f.case2(NA)
f.case2(1:6)
f.case2(c(10,20,30))
createVector1 <- function(...) {
if(any(is.na(...)))
return("NA")
else
(p <- c(...))
return(p)
}
createVector1()
createVector1 <- function(...) {
if(any(is.na(...)))
return("NA")
else
p <- c(...)
return(p)
}
createVector1()
createVector1 <- function(...) {
if(any(is.na(...)))
return("NA")
else
p <- c(...)
return(p)
}
createVector1("NA")
createVector1(3, LETTERS, TRUE)
test2 <- function(p){
cat("난 수행함\n")
try(testError1(-1))
cat("나 수행할 까요? \n")
}
test2()
f = sample(1:45, 6)
f
testParamType1(function(){})
testParamType2(LETTERS)
testParamType(mean)
o1 <- c(1,2,3,4,5) # 1 2 3 4 5
quantile(o1)
o2 <- c(1,2,3,4,5,6,7) # 1.0 2.5 4.0 5.5 7.0
quantile(o2)
o3 <- c(1,2,3,4,5,6,7,8,9) # 1 3 5 7 9
quantile(o3)
o4 <- c(1,2,3,4,5,6,7,8,9,10,11) # 1.0 3.5 6.0 8.5 11.0
quantile(o4)
o5 <- c(2,4,6,8,10) # 2 4 6 8 10
quantile(o5)
o6 <- c(2,10,16,28,30) # 2 10 16 28 30
quantile(o6)
o7 <- c(2,10,15,28,30,40,45) # 2.0 12.5 28.0 35.0 45.0
quantile(o7)
o8 <- c(10,12,18,20,25,26,30,32,33,40,50) # 10.0 19.0 26.0 32.5 50.0
quantile(o8)
o8 <- c(10,12,18,20,25,26,30,32,33,40,50) # 10.0 19.0 26.0 32.5 50.0
quantile(o8)
summary(o8)
e8 <- c(1,2,10,14,15,16,27,38)  # 1.00 8.00 14.50 18.75 38.00
quantile(e8)
length(ls())
